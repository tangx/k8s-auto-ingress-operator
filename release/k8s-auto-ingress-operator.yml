apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: k8s-auto-ingress-operator-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: autoingresses.network.sodev.cc
spec:
  group: network.sodev.cc
  names:
    kind: AutoIngress
    listKind: AutoIngressList
    plural: autoingresses
    singular: autoingress
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: AutoIngress is the Schema for the autoingresses API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: AutoIngressSpec defines the desired state of AutoIngress
            properties:
              rootDomain:
                description: RootDomain 为自动生成域名规则的跟域名。
                type: string
              servicePrefixes:
                items:
                  type: string
                type: array
              tlsSecretName:
                description: TlsSecretName 使用的证书名称。 在 ingress-controller 的命名空间下。
                type: string
            required:
            - rootDomain
            type: object
          status:
            description: AutoIngressStatus defines the observed state of AutoIngress
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-auto-ingress-operator-controller-manager
  namespace: k8s-auto-ingress-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-auto-ingress-operator-leader-election-role
  namespace: k8s-auto-ingress-operator-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: k8s-auto-ingress-operator-manager-role
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network.sodev.cc
  resources:
  - autoingresses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network.sodev.cc
  resources:
  - autoingresses/finalizers
  verbs:
  - update
- apiGroups:
  - network.sodev.cc
  resources:
  - autoingresses/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-auto-ingress-operator-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-auto-ingress-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-auto-ingress-operator-leader-election-rolebinding
  namespace: k8s-auto-ingress-operator-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-auto-ingress-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: k8s-auto-ingress-operator-controller-manager
  namespace: k8s-auto-ingress-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-auto-ingress-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-auto-ingress-operator-manager-role
subjects:
- kind: ServiceAccount
  name: k8s-auto-ingress-operator-controller-manager
  namespace: k8s-auto-ingress-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-auto-ingress-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-auto-ingress-operator-proxy-role
subjects:
- kind: ServiceAccount
  name: k8s-auto-ingress-operator-controller-manager
  namespace: k8s-auto-ingress-operator-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 62cdfc98.sodev.cc
kind: ConfigMap
metadata:
  name: k8s-auto-ingress-operator-manager-config
  namespace: k8s-auto-ingress-operator-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: k8s-auto-ingress-operator-controller-manager-metrics-service
  namespace: k8s-auto-ingress-operator-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: k8s-auto-ingress-operator-controller-manager
  namespace: k8s-auto-ingress-operator-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: tangxlab/auto-ingress-controller:v0.0.5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
      securityContext:
        runAsNonRoot: true
      serviceAccountName: k8s-auto-ingress-operator-controller-manager
      terminationGracePeriodSeconds: 10
